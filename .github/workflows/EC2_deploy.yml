# name : 해당 workflow, 파이프라인의 이름
name: Deploy To EC2

# event : master 브랜치에 push 될 때 실행
on:
  push:
    branches:
      - master

# job : 말 그대로 작업, 모든 작업
jobs:

  # job들의 id
  deploy:

    # github actions 실행 서버 종류
    runs-on: ubuntu-latest

    # steps : 특정 작업 수행 최소 단위, job을 구성한다
    steps:
        # name : 해당 step 이름
      - name: Github Repository 클론
        # uses : 어떤 github 라이브러리를 사용할건지
        uses: actions/checkout@v4

      - name: JDK 17 설치
        uses: actions/setup-java@v4
        # with : 위의 라이브러리 설정 변수 (JDK 공급자는 Temurin으로 하고, 버전은 17로 설치해 줘)
        with:
          distribution: temurin
          java-version: 17

      - name: application.yml 파일 생성
        # secrets.[변수명] : github 내부의 시크릿키, 대충 젠킨스의 크리덴셜과 동일하게 민감값 별도 관리
        # run : Bash 명령 실행
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./yammy_back/src/main/resources/application.yml

      - name: 테스트 및 빌드
        run: | # 문장 여러줄 작성 시 필요
          cd yammy_back
          chmod +x gradlew
          ./gradlew clean build

      ########################################
      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          # secrets : github에 저장된 secret값
          # aws 값 두개 : 박재환의 aws 계정 (IAM 사용자 엑세스 키) - ecr은 내꺼 쓰니까
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR에 로그인하기
        # ECR : aws의 docker 이미지 리포지토리
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 생성
        # yammy에서 Dockerfile을 찾는다
        run: docker build -t yammy .

      - name: Docker 이미지에 Tag 붙이기
        # 앞 yammy : 이미지 태그 / 뒷 yammy : ecr 리포지토리 이름 (내가 이미 yammy라고 만들었음)
        run: docker tag yammy ${{ steps.login-ecr.outputs.registry }}/yammy:latest
      
      - name: ECR에 Docker 이미지 Push하기
        run: docker push ${{ steps.login-ecr.outputs.registry }}/yammy:latest
      
      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          # script_stop : trun :: 실행중 오류 발생 시 해당 step 실패 처리
          script_stop: true
          envs: AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION
          script: |
            export PATH=$PATH:/usr/local/bin
            aws ecr get-login-password --region ap-northeast-2 | sudo docker login --username AWS --password-stdin 725115073641.dkr.ecr.ap-northeast-2.amazonaws.com
            sudo fuser -k -n tcp 8080 || true
            sudo docker stop yammy || true
            sudo docker rm yammy || true
            sudo docker pull ${{ steps.login-ecr.outputs.registry }}/yammy:latest
            sudo docker run -d --name yammy -p 8080:8080 ${{ steps.login-ecr.outputs.registry }}/yammy:latest
          # 명령어 경로 설정 - 어디서든 명령어 인식
          # ecr 재로그인
          # 80 프로세스 중단
          # 앞서 실행중인 yammy 이미지 중단 + 삭제
          # ecr 리포지토리의 최신 이미지 풀 + 실행
          # -d : 백그라운드 실행, 80:80 :: 호스트 80포트, 컨테이너 80포트